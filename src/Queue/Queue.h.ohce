// cutils: my c utils library
// Copyright (C) 2019  Qijian Zhang <arch.strange@foxmail.com>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// This file is generated from Queue.h.ohce by ohce.
/* if not T */
// ADT template type: A cycled queue type.
/* endif */
#ifndef CUTILS_$Queue$_H
#define CUTILS_$Queue$_H
$h_include$
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

/// $Queue$: a cycled queue type.
typedef struct _ADT_$Queue$_ *$Queue$;

/// Create a new $Queue$ object.
$Queue$ $Queue$_new();

/// Create a new $Queue$ object with size @capacity.
$Queue$ $Queue$_newWithCapacity(size_t capacity);

$Queue$ $Queue$_clone($Queue$ self);

void $Queue$_copy($Queue$ self, $Queue$ src);

/// Free @self.
void $Queue$_free($Queue$ self);

/// Check if @self is empty.
bool $Queue$_empty($Queue$ self);

/// Check if @self is full.
bool $Queue$_full($Queue$ self);

/// Get the current number of elements in queue @self.
size_t $Queue$_length($Queue$ self);

/// Get the @index'th element in queue @self.
///
/// Index started from head(indexed by 0) and should less then
/// @self's length, otherwise returned value is undefined.
$T$ $Queue$_get($Queue$ self, size_t index);

/// Set the @index'th element.
///
/// If @index is not less then @self's length, nothing
/// will be done.
/* if T_copy */
/// Generic method `set`.
#define $Queue$_set(self, index, value) \
_Generic(value, \
	 $T$: __$Queue$_set_use_assign, \
	 default: __$Queue$_set_use_copy \
) (self, index, value)

void __$Queue$_set_use_assign($Queue$ self, size_t index, $T$ value);
void __$Queue$_set_use_copy($Queue$ self, size_t index, const $T$ *value);
/* else */
void $Queue$_set($Queue$ self, size_t index, $T$ value);
/* endif */

/// Pop head element.
/// Returned value is undefined if @self is empty.
$T$ $Queue$_popHead($Queue$ self);

/// Pop tail element.
/// Returned value is undefined if @self is empty.
$T$ $Queue$_popTail($Queue$ self);

/// Push @value to head of @self.
/* if T_clone */
/// Generic method `pushHead`.
#define $Queue$_pushHead(self, value) \
_Generic(value, \
	 $T$: __$Queue$_pushHead_use_assign, \
	 default: __$Queue$_pushHead_use_clone \
) (self, value)

void __$Queue$_pushHead_use_assign($Queue$ self, $T$ value);
void __$Queue$_pushHead_use_clone($Queue$ self, const $T$ *value);
/* else */
void $Queue$_pushHead($Queue$ self, $T$ value);
/* endif */

/// Push @value to tail of @self.
/* if T_clone */
/// Generic method `pushTail`.
#define $Queue$_pushTail(self, value) \
_Generic(value, \
	 $T$: __$Queue$_pushTail_use_assign, \
	 default: __$Queue$_pushTail_use_clone \
) (self, value)

void __$Queue$_pushTail_use_assign($Queue$ self, $T$ value);
void __$Queue$_pushTail_use_clone($Queue$ self, const $T$ *value);
/* else */
void $Queue$_pushTail($Queue$ self, $T$ value);
/* endif */

#endif
