// cutils: my c utils library
// Copyright (C) 2019  Qijian Zhang <arch.strange@foxmail.com>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// This file is generated from Vector.c.ohce by ohce.
#include "$Vector$.h"
$c_include$
#include <string.h>

struct _ADT_$Vector$ {
	size_t capacity, length;
	$T$ *data;
};

static inline void $Vector$_realloc($Vector$ self, size_t new_capacity);
static inline void $Vector$_init($Vector$ self, size_t capacity);
static inline void $Vector$_final($Vector$ self);

/* if T_copy */
static inline void T_sign($T$ *dst, $T$ src)
{
/* if T_free */
	$T_free$(*dst);
/* endif */
	*dst = src;
}
/* endif */

$Vector$ $Vector$_new()
{
	return $Vector$_newWithCapacity(1);
}

$Vector$ $Vector$_newWithCapacity(size_t capacity)
{
	$Vector$ self = malloc(sizeof(*self));
	$Vector$_init(self, capacity);
	return self;
}

$Vector$ $Vector$_newFromArray($T$ const *array, size_t length)
{
	$Vector$ self = $Vector$_newWithCapacity(length);
/* if T_clone */
	for (size_t i = 0; i < length; i++) {
		self->data[i] = $T_clone$(array[i]);
	}
/* else */
	memcpy(self->data, array, sizeof($T$) * length);
/* endif */
	self->length = length;
	return self;
}

$Vector$ $Vector$_clone($Vector$ src)
{
	if (src == NULL) return $Vector$_new();
	return $Vector$_newFromArray(src->data, src->length);
}

void $Vector$_copy($Vector$ self, $Vector$ src)
{
	if (self == src) return;
	$Vector$_copyArray(self, src->data, src->length);
}

void $Vector$_copyArray($Vector$ self, $T$ const *array, size_t n)
{
	$Vector$_final(self);
	$Vector$_init(self, n);
/* if T_clone */
	for (size_t i = 0; i < n; i++) {
		self->data[i] = $T_clone$(array[i]);
	}
/* else */
	memcpy(self->data, array, sizeof($T$) * n);
/* endif */
	self->length = n;
}

void $Vector$_copySub($Vector$ self, $Vector$ src, size_t start, size_t n)
{
	if (self != src && start < src->length) {
		n = start + n < src->length ? n : src->length - start;
		$Vector$_copyArray(self, src->data + start, n);
	}
}

void $Vector$_free($Vector$ self)
{
	if (self) {
		$Vector$_final(self);
		free(self);
	}
}

/* if not no_cmp */
int $Vector$_cmp($Vector$ self, $Vector$ right)
{
	if (self == right)
		return 0;

	int ret;
	size_t len = self->length;
	if (self->length < right->length) {
		ret = -1;
	} else if (self->length == right->length) {
		ret = 0;
	} else {
		len = right->length;
		ret = 1;
	}

	int cmp;
	for (size_t i = 0; i < len; i++) {
/* if T_cmp */
		cmp = $T_cmp$(self->data[i], right->data[i]);
/* else */
		cmp = self->data[i] - right->data[i];
/* endif */
		if (cmp != 0)
			return cmp;
	}
	return ret;
}
/* endif */

/* if not no_equal */
bool $Vector$_equal($Vector$ self, $Vector$ right)
{
	if (self == right)
		return true;

	if (self->length != right->length)
		return false;

	for (size_t i = 0; i < self->length; i++) {
		if (
/* if T_equal */
		!$T_equal$(self->data[i], right->data[i])
/* else */
		self->data[i] != right->data[i]
/* endif */
		)
			return false;
	}
	return true;
}
/* endif */

/* if not no_hash */
uint32_t $Vector$_hash($Vector$ self)
{
	uint32_t hash = 0;
	for (size_t i = 0, n = self->length / 4; i < n; i++) {
		uint32_t hash_step = 0;
		size_t index = i << 2;
		for (size_t j = 0; j < 4; j++) {
/* if T_hash */
			hash_step = (hash_step << 6)
				    + $T_hash$(self->data[index + j]);
/* else */
			hash_step = (hash_step << 6) + self->data[index + j];
/* endif */
		}
		hash ^= hash_step;
	}
	uint32_t hash_step = 0;
	for (size_t i = self->length - (self->length % 4); i < self->length; i++) {
/* if T_hash */
		hash_step = (hash_step << 6) + $T_hash$(self->data[i]);
/* else */
		hash_step = (hash_step << 6) + self->data[i];
/* endif */
	}
	hash ^= hash_step;
	return hash;
}
/* endif */

size_t $Vector$_dump($Vector$ self, $T$ *buffer)
{
	return $Vector$_dumpn(self, buffer, self->length);
}

size_t $Vector$_dumpn($Vector$ self, $T$ *buffer, size_t n)
{
	n = self->length < n ? self->length : n;
	memcpy(buffer, self->data, sizeof($T$) * n);
	return n;
}

bool $Vector$_empty($Vector$ self)
{
	return self->length == 0;
}

size_t $Vector$_getLength($Vector$ self)
{
	return self->length;
}

/* if T_new */
void $Vector$_setLength($Vector$ self, size_t length)
{
	if (length > self->capacity) {
		$Vector$_realloc(self, length);
	}
	if (length > self->length) {
		for (size_t i = self->length; i < length; i++) {
			self->data[i] = $T_new$();
		}
	}
/* if T_free */
	else {
		for (size_t i = length; i < self->length; i++) {
			$T_free$(self->data[i]);
		}
	}
/* endif */
	self->length = length;
}
/* endif */

void $Vector$_clear($Vector$ self)
{
/* if T_free */
	for (size_t i = 0; i < self->length; i++) {
		$T_free$(self->data[i]);
	}
/* endif */
	self->length = 0;
}

void $Vector$_eraseTail($Vector$ self, size_t count)
{
	count = count > self->length ? self->length : count;
/* if T_free */
	for (size_t i = self->length - count; i < self->length; i++) {
		$T_free$(self->data[i]);
	}
/* endif */
	self->length -= count;
}

size_t $Vector$_getCapacity($Vector$ self)
{
	return self->capacity;
}

void $Vector$_setCapacity($Vector$ self, size_t capacity)
{
	capacity = capacity == 0 ? 1 : capacity;
	if (self->capacity == capacity) return;
	$Vector$_realloc(self, capacity);
}

void $Vector$_shrink($Vector$ self)
{
	$Vector$_setCapacity(self, self->length);
}

/* if T_copy */
void __$Vector$_set_use_assign($Vector$ self, size_t index, $T$ value)
{
	T_sign(self->data + index, value);
}

void __$Vector$_set_use_copy($Vector$ self, size_t index, $T$ const *value)
{
	$T_copy$(self->data[index], *value);
}
/* else */
void $Vector$_set($Vector$ self, size_t index, $T$ value)
{
	self->data[index] = value;
}
/* endif */

$T$ $Vector$_get($Vector$ self, size_t index)
{
	return self->data[index];
}

#define Vector_preInsert(self, index) \
	if (index >= self->length) \
		return self->length; \
	if (self->length >= self->capacity) { \
		$Vector$_realloc(self, self->capacity * 2); \
	} \
	size_t i = self->length; \
	while (i > index) { \
		self->data[i] = self->data[i - 1]; \
		i -= 1; \
	} \
	self->length += 1

/* if T_clone */
size_t __$Vector$_insert_use_clone($Vector$ self, size_t index, $T$ const *value)
{
	Vector_preInsert(self, index);
	self->data[i] = $T_clone$(*value);
	return self->length;
}

size_t __$Vector$_insert_use_assign($Vector$ self, size_t index, $T$ value)
/* else */
size_t $Vector$_insert($Vector$ self, size_t index, $T$ value)
/* endif */
{
	Vector_preInsert(self, index);
	self->data[i] = value;
	return self->length;
}

$T$ *$Vector$_data($Vector$ self)
{
	return self->data;
}

/* if T_clone */
size_t __$Vector$_push_use_clone($Vector$ self, $T$ const *value)
{
	if (self->length >= self->capacity) {
		$Vector$_realloc(self, self->capacity * 2);
	}
	self->data[self->length] = $T_clone$(*value);
	self->length += 1;
	return self->length;
}

size_t __$Vector$_push_use_assign($Vector$ self, $T$ value)
/* else */
size_t $Vector$_push($Vector$ self, $T$ value)
/* endif */
{
	if (self->length >= self->capacity) {
		$Vector$_realloc(self, self->capacity * 2);
	}
	self->data[self->length] = value;
	self->length += 1;
	return self->length;
}

$T$ $Vector$_pop($Vector$ self)
{
	if (self->length > 0) 
		self->length -= 1;
	return self->data[self->length];
}

size_t $Vector$_append($Vector$ self, $Vector$ src)
{
	return $Vector$_appendArray(self, src->data, src->length);
}

size_t $Vector$_appendArray($Vector$ self, const $T$ *a, size_t count)
{
	if (a == NULL || count == 0) {
		return self->length;
	}
	if (self->length + count > self->capacity) {
		$Vector$_realloc(self, self->capacity + count);
	}
/* if T_clone */
	for (size_t i = 0; i < count; i++) {
		self->data[self->length + i] = $T_clone$(a[i]);
	}
/* else */
	memcpy(self->data + self->length, a, sizeof($T$) * count);
/* endif */
	self->length += count;
	return self->length;
}

static inline void $Vector$_realloc($Vector$ self, size_t new_capacity)
{
	$T$ *tmp = calloc(new_capacity, sizeof($T$));
	if (self->length > new_capacity) {
/* if T_free */
		for (size_t i = new_capacity; i < self->length; i++) {
			$T_free$(self->data[i]);
		}
/* endif */
		self->length = new_capacity;
	}
	memcpy(tmp, self->data, sizeof($T$) * self->length);
	free(self->data);
	self->data = tmp;
	self->capacity = new_capacity;
}

static inline void $Vector$_init($Vector$ self, size_t capacity)
{
	self->capacity = capacity == 0 ? 1 : capacity;
	self->length = 0;
	self->data = calloc(self->capacity, sizeof($T$));
}

static inline void $Vector$_final($Vector$ self)
{
/* if T_free */
	for (size_t i = 0; i < self->length; i++) {
		$T_free$(self->data[i]);
	}
/* endif */
	free(self->data);
	self->length = self->capacity = 0;
}

