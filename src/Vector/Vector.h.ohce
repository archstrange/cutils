// cutils: my c utils library
// Copyright (C) 2019  Qijian Zhang <arch.strange@foxmail.com>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

/* if not T */
// ADT-template type -- Vector: a dynamic array type
//
// Some lifetime handle functions may help $Vector$ to
// new and free $T$ object. They are used like this:
//	`$T$ t = $T_new$();` or `$T$ t;`
//	`$T_free$(t);` or no freeing
//	`$T$ t = $T_clone$(src);` or `$T$ t = src;`
//	`$T_copy$(t, src);` or `t = src;`
/* endif */
// This file is generated from Vector.h.ohce by ohce.
#ifndef ADT_TEMPLATE_$Vector$_H
#define ADT_TEMPLATE_$Vector$_H
$h_include$
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

/// $Vector$: Vector of $T$, generated from `Vector.[ch].ohce`.
typedef struct _ADT_$Vector$ *$Vector$;

/// Lifetime function: create a new $Vector$ object.
$Vector$ $Vector$_new();

/// Lifetime function: create a new $Vector$ object with @capacity.
$Vector$ $Vector$_newWithCapacity(size_t capacity);

/// Lifetime function: create a new $Vector$ object from @array.
$Vector$ $Vector$_newFromArray($T$ const *array, size_t length);

/// Lifetime function: clone the whole @src object.
$Vector$ $Vector$_clone($Vector$ src);

/// Lifetime function: copy the whole @src object to @self.
void $Vector$_copy($Vector$ self, $Vector$ src);

/// Copy the first @n elements of @src to @self.
void $Vector$_copyArray($Vector$ self, $T$ const *array, size_t n);

/// Copy @n elements of @src started at @start to @self.
///
/// If @start is greater than @self's length or @self and @src
/// are the same object, nothing will be done.
///
/// If @src has not enough elements from @start, `$Vector$_copySub`
/// will stop after it copyed the last element.
void $Vector$_copySub($Vector$ self, $Vector$ src, size_t start, size_t n);

/// Lifetime function: free @self object.
void $Vector$_free($Vector$ self);

/* if not Vector */
// cmp and equal functions are helpful if you want to
// sort a lot of Vectors or identify them.
//
// If element type T is object type, you should provide
// T's cmp and equal functions, otherwise T is assumed
// an arithmetic type.
//
// Elements are compared one by one, until two elements
// are not equal. Missing element(no more elements) is
// treated the smallest one.
//
// hash function is useful if you want to use it as a
// dict key type.
//
// If T_hash is not available, well T should be an
// arithmetic type too.
//
// function signatures:
//	int T_cmp(T left, T right);
//	bool T_equal(T left, T right);
//	uint32_t T_hash(T self);
/* endif */

/* if not no_cmp */
/// Compare two $Vector$s.
int $Vector$_cmp($Vector$ self, $Vector$ right);
/* endif */

/* if not no_equal */
/// Check equality.
bool $Vector$_equal($Vector$ self, $Vector$ right);
/* endif */

/* if not no_hash */
/// Hash this object.
uint32_t $Vector$_hash($Vector$ self);
/* endif */

/// Dump all elements to @buffer. @buffer must hold enough space
/// to store all elements.
void $Vector$_dump($Vector$ self, $T$ *buffer);

/// Same as `$Vector$_dump`, but the first @n elements only.
void $Vector$_dumpn($Vector$ self, $T$ *buffer, size_t n);

/// Check if @self if empty.
bool $Vector$_empty($Vector$ self);

/// Get length of @self.
size_t $Vector$_getLength($Vector$ self);

/// Set length of @self.
void $Vector$_setLength($Vector$ self, size_t length);

/// Clear all elements.
void $Vector$_clear($Vector$ self);

/// Try to erase the last elements of @self as much(@count) as it can.
void $Vector$_eraseTail($Vector$ self, size_t count);

/// Get capacity of @self.
size_t $Vector$_getCapacity($Vector$ self);

/// Tell $Vector$ to preallocate enough memory. $Vector$'s length
/// may be changed. Normally $Vector$ will handle its memory
/// automatically, so call this if you want $Vector$ to use specific size
/// of memory.
///
/// $Vector$ always handle memory automatically, so capacity maybe changed
/// if you remove or add elements to @self.
void $Vector$_setCapacity($Vector$ self, size_t capacity);

/// Set capacity to its length.
void $Vector$_shrink($Vector$ self);

/// Same meanding as `self[index] = value`.
/// @index must be less than length of @self.
void $Vector$_set($Vector$ self, size_t index, $T$ value);

/// Same meanding as `self[index]`.
/// @index must be less than length of @self.
$T$ $Vector$_get($Vector$ self, size_t index);

/// Insert @value to `self[index]`, all elements after will be
/// moved backward.
/// @index should be less than length of @self, otherwise
/// nothing will be done.
///
/// Return length after this call.
size_t $Vector$_insert($Vector$ self, size_t index, $T$ value);

/// Get internal buffer.
///
/// This is unsafe, be aware what you are doing.
$T$ *$Vector$_data($Vector$ self);

/// Push @value to the back of @self.
size_t $Vector$_push($Vector$ self, $T$ value);

/// Pop out the last element. If no elements left, the returned
/// value is undefined.
/* if T_free */
/// Remember to free the returned object, since it's newed by
/// $Vector$ itself.
/* endif */
$T$ $Vector$_pop($Vector$ self);

/// Append @src to @self.
size_t $Vector$_append($Vector$ self, $Vector$ src);

/// Append a $T$ array to @self.
size_t $Vector$_appendArray($Vector$ self, const $T$ *a, size_t count);

#endif
