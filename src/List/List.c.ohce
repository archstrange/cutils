// cutils: my c utils library
// Copyright (C) 2019  Qijian Zhang <arch.strange@foxmail.com>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// This file is generated from List.c.ohce by ohce.
#include "$List$.h"
$c_include$

struct _ADT_$List$Node_ {
	$T$ value;
	$List$Node prev, next;
	$List$ list;
};

struct _ADT_$List$_ {
	struct _ADT_$List$Node_ guard;
	size_t length;
};

static inline $List$Node $List$Node_newInList($List$ list,
					      $T$ value,
					      $List$Node prev,
					      $List$Node next);
// Return @self's next node.
static inline $List$Node $List$Node_freeInList($List$Node self);

void $List$Node_set($List$Node self, $T$ value)
{
/* if T_copy */
	$T_copy$(self->value, value);
/* else */
	self->value = value;
/* endif */
}

$T$ $List$Node_get($List$Node self)
{
	return self->value;
}

$List$Node $List$Node_getNext($List$Node self)
{
	return self->next == &self->list->guard ? NULL : self->next;
}

$List$Node $List$Node_getPrev($List$Node self)
{
	return self->prev == &self->list->guard ? NULL : self->prev;
}

$List$Node $List$Node_insertPrev($List$Node self, $T$ value)
{
	self->list->length += 1;
	return $List$Node_newInList(self->list, value, self->prev, self);
}

$List$Node $List$Node_insertNext($List$Node self, $T$ value)
{
	self->list->length += 1;
	$List$Node_newInList(self->list, value, self, self->next);
}

size_t $List$Node_delete($List$Node self)
{
	self->list->length -= 1;
	self = $List$Node_freeInList(self);
	return self->list->length;
}

$List$ $List$_new()
{
	$List$ self = malloc(sizeof(*self));
	self->guard.next = self->guard.prev = &self->guard;
	self->guard.list = self;
	self->length = 0;
	return self;
}

$List$ $List$_clone($List$ src)
{
	$List$ self = $List$_new();
	$List$Node n = src->guard.next;
	while (n != &src->guard) {
		$List$_pushBack(self, n->value);
		n = n->next;
	}
	return self;
}

void $List$_copy($List$ self, $List$ src)
{
	$List$Node dstnode = self->guard.next,
		   srcnode = src->guard.next;
	bool dst_done = dstnode == &self->guard;
	bool src_done = srcnode == &src->guard;
	while (!dst_done || !src_done) {
		if (dst_done) { // dst is short than src
			$List$_pushBack(self, srcnode->value);
			srcnode = srcnode->next;
			src_done = srcnode == &src->guard;
		} else if (src_done) { // src is short than dst
			dstnode = $List$Node_freeInList(dstnode);
			dst_done = dstnode == &self->guard;
		} else { // still in the middle...
/* if T_copy */
			$T_copy$(dstnode->value, srcnode->value);
/* else */
			dstnode->value = srcnode->value;
/* endif */
			dst_done = (dstnode = dstnode->next) == &self->guard;
			src_done = (srcnode = srcnode->next) == &src->guard;
		}
	}
	self->length = src->length;
}

void $List$_free($List$ self)
{
	if (self != NULL) {
		$List$Node n = self->guard.next;
		while (n != &self->guard) {
			n = $List$Node_freeInList(n);
		}
		free(self);
	}
}

$List$Node $List$_getHead($List$ self)
{
	return self->guard.next == &self->guard ? NULL : self->guard.next;
}

$List$Node $List$_getTail($List$ self)
{
	return self->guard.prev == &self->guard ? NULL : self->guard.prev;
}

size_t $List$_getLength($List$ self)
{
	return self->length;
}

size_t $List$_pushFront($List$ self, $T$ value)
{
	$List$Node_newInList(self, value, &self->guard, self->guard.next);
	self->length += 1;
	return self->length;
}

size_t $List$_pushBack($List$ self, $T$ value)
{
	$List$Node_newInList(self, value, self->guard.prev, &self->guard);
	self->length += 1;
	return self->length;
}

static inline $List$Node $List$Node_newInList($List$ list,
					      $T$ value,
					      $List$Node prev,
					      $List$Node next)
{
	$List$Node self = malloc(sizeof(*self));
/* if T_clone */
	self->value = $T_clone$(value);
/* else */
	self->value = value;
/* endif */
	self->list = list;
	self->prev = prev;
	self->next = next;
	prev->next = next->prev = self;
	return self;
}

static inline $List$Node $List$Node_freeInList($List$Node self)
{
	$List$Node next = self->next;
	self->prev->next = self->next;
	self->next->prev = self->prev;
/* if T_free */
	$T_free$(self->value);
/* else */
	free(self);
/* endif */
	return next;
}

