// cutils: my c utils library
// Copyright (C) 2019  Qijian Zhang <arch.strange@foxmail.com>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// This file is generated from List.h.ohce by ohce.
/* if not T */
// ADT template type List: a double linked list type.
/* endif */
#ifndef CUTILS_$List$_H
#define CUTILS_$List$_H
$h_include$
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

/// $List$: a double linked list type.
typedef struct _ADT_$List$_ *$List$;

/// $List$Node: $List$ node type.
typedef struct _ADT_$List$Node_ *$List$Node;

/// Set the data hold by @self to @value.
void $List$Node_set($List$Node self, $T$ value);

/// Get the data hold by @self.
$T$ $List$Node_get($List$Node self);

/// Get next node. If @self is tail-node, NULL will be returned.
$List$Node $List$Node_getNext($List$Node self);

/// Get previous node. If @self is head-node, NULL will be returned.
$List$Node $List$Node_getPrev($List$Node self);

/// Create a new node that hold @value and insert it as
/// @self's previous node.
$List$Node $List$Node_insertPrev($List$Node self, $T$ value);

/// Create a new node that hold @value and insert it as
/// @self's next node.
$List$Node $List$Node_insertNext($List$Node self, $T$ value);

/// Delete this node from list.
size_t $List$Node_delete($List$Node self);

/// Create a new empty $List$ object.
$List$ $List$_new();

$List$ $List$_clone($List$ src);

void $List$_copy($List$ self, $List$ src);

/// Free @self.
void $List$_free($List$ self);

/// Get head node.
$List$Node $List$_getHead($List$ self);

/// Get tail node.
$List$Node $List$_getTail($List$ self);

/// Get the number of nodes.
size_t $List$_getLength($List$ self);

size_t $List$_pushFront($List$ self, $T$ value);

size_t $List$_pushBack($List$ self, $T$ value);

#endif
